@page "/StepLines/AutoUpdate"
@using LiveChartsCore.SkiaSharpView.Blazor
@using LiveChartsCore.SkiaSharpView
@using LiveChartsCore
@using LiveChartsCore.Defaults
@using System.Collections.ObjectModel

<div>
	<button type="button" class="btn btn-primary" @onclick="AddItem">Add item</button>
	<button type="button" class="btn btn-primary" @onclick="ReplaceItem">Replace item</button>
	<button type="button" class="btn btn-primary" @onclick="RemoveItem">Remove item</button>
	<button type="button" class="btn btn-primary" @onclick="AddSeries">Add series</button>
	<button type="button" class="btn btn-primary" @onclick="RemoveSeries">Remove series</button>
	<button type="button" class="btn btn-primary" @onclick="ToggleConstantChanges">Constant changes</button>
</div>

<CartesianChart
	Series="SeriesCollection">
</CartesianChart>

@code {
    private readonly Random _random = new();
    private bool? _isStreaming = false;
    private ObservableCollection<ISeries> SeriesCollection { get; set; }
    private ObservableCollection<ObservableValue> _juanaValues;

    protected override void OnInitialized()
    {
        _juanaValues = new ObservableCollection<ObservableValue>
        {
            new(2), new(5), new(4)
        };

        SeriesCollection = new ObservableCollection<ISeries>
        {
            new StepLineSeries<ObservableValue>
            {
                Name = "Juana",
                Values = _juanaValues
            },
            new StepLineSeries<ObservableValue>
            {
                Name = "Mary",
                Values = new ObservableCollection<ObservableValue>
                {
                    new(5), new(4), new(1)
                }
            }
        };
    }

    private void AddSeries()
    {
        SeriesCollection.Add(
            new StepLineSeries<ObservableValue>
            {
                Name = $"User #{SeriesCollection.Count}",
                Values = new ObservableCollection<ObservableValue>(FetchValues())
            });
        StateHasChanged();
    }

    private void RemoveSeries()
    {
        if (SeriesCollection.Count <= 1) return;
        SeriesCollection.RemoveAt(SeriesCollection.Count - 1);
        StateHasChanged();
    }

    private void AddItem()
    {
        var newPoint = new ObservableValue { Value = _random.Next(0, 10) };
        _juanaValues.Add(newPoint);
        StateHasChanged();
    }

    private void RemoveItem()
    {
        if (_juanaValues.Count < 2) return;
        _juanaValues.RemoveAt(0);
        StateHasChanged();
    }

    private void ReplaceItem()
    {
        if (_juanaValues.Count < 2) return;
        var randomIndex = _random.Next(0, _juanaValues.Count - 1);
        _juanaValues[randomIndex] = new ObservableValue(_random.Next(1, 10));
        StateHasChanged();
    }

    public async void ToggleConstantChanges()
    {
        _isStreaming = _isStreaming is null ? true : !_isStreaming;

        while (_isStreaming.Value)
        {
            RemoveItem();
            AddItem();
            await Task.Delay(100);
        }
    }

    private ObservableValue[] FetchValues()
    {
        return new[]
        {
            new ObservableValue(_random.Next(0, 10)),
            new ObservableValue(_random.Next(0, 10)),
            new ObservableValue(_random.Next(0, 10))
        };
    }
}
